// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.coleadmin.controller;

import com.raze.coleadmin.catalog.Concepto;
import com.raze.coleadmin.controller.ConceptoController;
import com.raze.coleadmin.domain.Escuela;
import com.raze.coleadmin.service.CategoriaService;
import com.raze.coleadmin.service.ConceptoService;
import com.raze.coleadmin.service.EscuelaService;
import com.raze.coleadmin.service.UsuarioService;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ConceptoController_Roo_Controller {
    
    @Autowired
    EscuelaService ConceptoController.escuelaService;
    
    @Autowired
    ConceptoService ConceptoController.conceptoService;
    
    @Autowired
    CategoriaService ConceptoController.categoriaService;
    
    @Autowired
    UsuarioService ConceptoController.usuarioService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ConceptoController.create(@Valid Concepto concepto, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, concepto);
            return "conceptoes/create";
        }
        uiModel.asMap().clear();
        conceptoService.saveConcepto(concepto);
        return "redirect:/conceptoes/" + encodeUrlPathSegment(concepto.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ConceptoController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Concepto());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (escuelaService.countAllEscuelas() == 0) {
            dependencies.add(new String[] { "escuela", "escuelas" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "conceptoes/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ConceptoController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("concepto", conceptoService.findConcepto(id));
        uiModel.addAttribute("itemId", id);
        return "conceptoes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ConceptoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("conceptoes", conceptoService.findConceptoEntries(firstResult, sizeNo));
            float nrOfPages = (float) conceptoService.countAllConceptoes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("conceptoes", conceptoService.findAllConceptoes());
        }
        addDateTimeFormatPatterns(uiModel);
        return "conceptoes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ConceptoController.update(@Valid Concepto concepto, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, concepto);
            return "conceptoes/update";
        }
        uiModel.asMap().clear();
        conceptoService.updateConcepto(concepto);
        return "redirect:/conceptoes/" + encodeUrlPathSegment(concepto.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ConceptoController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, conceptoService.findConcepto(id));
        return "conceptoes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ConceptoController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Concepto concepto = conceptoService.findConcepto(id);
        conceptoService.deleteConcepto(concepto);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/conceptoes";
    }
    
    void ConceptoController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("concepto_fechacreacion_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("concepto_fechamodificacion_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void ConceptoController.populateEditForm(Model uiModel, Concepto concepto) {
        uiModel.addAttribute("concepto", concepto);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("categorias", categoriaService.findAllCategorias());
        uiModel.addAttribute("escuelas", escuelaService.findAllEscuelas());
        uiModel.addAttribute("usuarios", usuarioService.findAllUsuarios());
    }
    
    String ConceptoController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
